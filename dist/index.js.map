{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  h,\n  cloneElement,\n  render,\n  hydrate,\n  type FunctionComponent,\n  type ComponentClass,\n  type FunctionalComponent,\n  type VNode,\n} from \"preact\";\n\nexport type AttributeValue = null | string | boolean | number;\nexport type SignalLike<T> = { value: T };\n\n// ----\n\ntype PreactComponent =\n  FunctionComponent<any> |\n  ComponentClass<any> |\n  FunctionalComponent<any>;\n\ntype AttributeConfig<T> = {\n  name: string,\n  type: (value: AttributeValue) => T,\n};\ntype PropertyConfig<T> = (\n  { name: string, formAssociated?: boolean }\n) & (\n  { attribute: AttributeConfig<T> } | { initialValue: T }\n);\n\ntype Options = {\n  adoptedStyleSheets?: CSSStyleSheet[],\n  slots?: string[],\n  properties?: PropertyConfig<any>[],\n};\n\ntype AttributeChangeHandler = (v: AttributeValue) => void;\ntype InternalProp<T> = { _dirty: boolean, _value: T, value: T };\n\n// ----\n\nconst Slot = (props: { name?: string }) => (\n  h(\"slot\", props)\n);\n\n// Sanitize any value to FormValue\nconst serializeFormValue = (value: any): string | FormData => {\n  if (value == null) {\n    return \"\";\n  }\n  if (typeof value !== \"object\") {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    value.map(item => item.toString().replaceAll(\",\", \"\\\\,\")).join(\",\");\n  }\n  // valueType must be \"object\" here\n  const fields = Object.keys(value);\n  const formData = new FormData();\n  fields.forEach(field => {\n    formData.append(field, value[field].toString());\n  });\n  return formData;\n}\n\nconst pushOrNew = <T>(obj: Record<string, T[]>, field: string, item: T) => {\n  if (obj[field]) {\n    obj[field].push(item);\n  } else {\n    obj[field] = [item];\n  }\n}\n\nexport const makeCustomElement = (\n  Component: PreactComponent,\n  options?: Options,\n) => {\n  const properties = options?.properties ?? [];\n  const slots = options?.slots ?? [];\n  const sheets = options?.adoptedStyleSheets ?? [];\n\n  const observedAttributes = (\n    properties.filter(prop => \"attribute\" in prop).map(prop => prop.attribute.name)\n  );\n\n  const formAssociatedField = properties.find(prop => prop.formAssociated)?.name;\n\n  class CustomElement extends HTMLElement {\n    static observedAttributes = observedAttributes;\n    static formAssociated = !!formAssociatedField;\n    _root;\n    _vdom;\n    _internals;\n    _props;\n    _attributeChangeHooks;\n\n    constructor () {\n      super();\n      // This library assumes that the ShadowDOM feature is always enabled\n      this._root = this.attachShadow({ mode: \"open\" });\n      this._root.adoptedStyleSheets = sheets;\n      this._vdom = null as (VNode | null);\n      this._internals = formAssociatedField ? this.attachInternals() : null;\n      this._props = {} as Record<string, InternalProp<any>>;\n      this._attributeChangeHooks = {} as Record<string, AttributeChangeHandler[]>;\n      properties.forEach(prop => this.registerProperty(prop));\n    }\n\n    parseAttribute <T>(attribute: AttributeConfig<T>) {\n      return attribute.type(this.getAttribute(attribute.name));\n    }\n\n    registerProperty <T>(options: PropertyConfig<T>) {\n      const name = options.name;\n\n      const isAssociatedField = formAssociatedField === name;\n      const getter = () => this._props[name].value;\n      const setter = (value: T, markAsDirty: boolean) => {\n        if (value !== this._props[name].value) {\n          this._props[name]._value = value;\n          if (markAsDirty) {\n            this._props[name]._dirty = true;\n          }\n          if (isAssociatedField && this._internals) {\n            this._internals.setFormValue(serializeFormValue(value));\n          }\n          this.rerender();\n        }\n      };\n      Object.defineProperty(this, name, {\n        get: getter,\n        set: (value: T) => setter(value, true),\n      });\n\n      const initialValue = \"initialValue\" in options ? (\n        options.initialValue\n      ) : (\n        this.parseAttribute(options.attribute)\n      );\n      this._props[name] = {\n        _value: initialValue,\n        _dirty: false,\n        get value () { return this._value; },\n        set value (v: T) { setter(v, true); },\n      };\n\n      if (\"attribute\" in options) {\n        const onAttributeChange = (newValue: AttributeValue) => {\n          if (!this._props[name]?._dirty) {\n            setter(options.attribute.type(newValue), false);\n          }\n        };\n        pushOrNew(this._attributeChangeHooks, name, onAttributeChange);\n      }\n    }\n\n    rerender () {\n      if (this._vdom) {\n        this._vdom = cloneElement(this._vdom, this._props);\n        render(this._vdom, this._root);\n      }\n    }\n\n    connectedCallback () {\n      const slots = Object.fromEntries(\n        (options?.slots ?? []).map(slot => [\n          slot,\n          h(Slot, { name: slot }, null),\n        ]),\n      );\n      const props = { ...this._props, ...slots };\n      this._vdom = h(Component, props, h(Slot, { name: undefined }, null));\n      // TODO: I don't know how this works (just copy-pasted from preact-custom-component)\n      (this.hasAttribute('hydrate') ? hydrate : render)(this._vdom, this._root);\n    }\n\n    disconnectedCallback () {\n      this._vdom = null;\n      render(null, this._root);\n    }\n\n    attributeChangedCallback (name: string, _: AttributeValue, newValue: AttributeValue) {\n      if (this._attributeChangeHooks[name]) {\n        this._attributeChangeHooks[name].forEach(hook => hook(newValue));\n      }\n    }\n  }\n\n  return CustomElement;\n};\n\nexport const register = (\n  Component: PreactComponent,\n  tagName: string,\n  options?: Options,\n) => {\n  const element = makeCustomElement(Component, options);\n  return customElements.define(tagName, element);\n};\n"],"names":["Slot","props","h","serializeFormValue","value","item","fields","formData","field","pushOrNew","obj","makeCustomElement","Component","options","properties","sheets","observedAttributes","prop","formAssociatedField","_a","CustomElement","__publicField","attribute","name","isAssociatedField","getter","setter","markAsDirty","initialValue","v","onAttributeChange","newValue","cloneElement","render","slots","slot","hydrate","_","hook","register","tagName","element"],"mappings":"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"}